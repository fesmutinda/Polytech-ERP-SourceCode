#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 50041 "Loan Arrears1"
{
    RDLCLayout = './Layout/LoanArrears1.rdl';
    DefaultLayout = RDLC;
    Caption = 'Loan Arears1';

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "No.", "Loan Product Filter", "Outstanding Balance", "Date Filter";
            column(ReportForNavId_1102755000; 1102755000) { } // Autogenerated by ForNav - Do not delete
            column(No_Members; Customer."No.")
            {
            }
            column(Name_Members; Customer.Name)
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            dataitem(Loans; "Loans Register")
            {
                DataItemLink = "Client Code" = field("No."), "Date filter" = field("Date Filter"), "Loan Product Type" = field("Loan Product Filter"), "Loan  No." = field("Loan No. Filter");
                DataItemTableView = sorting("Loan  No.") where(Posted = const(true), "Outstanding Balance" = filter(> 0), "Loan Product Type" = filter(<> '24'));
                column(LoanNo_Loans; Loans."Loan  No.")
                {
                }
                column(ProductType; LoanName)
                {
                }
                column(Installments; Loans.Installments)
                {
                }
                column(ApprovedAmount_Loans; Loans."Approved Amount")
                {
                }
                column(OutstandingBalance_Loans; Loans."Outstanding Balance")
                {
                }
                column(OustandingInterest_Loans; Loans."Oustanding Interest")
                {
                }
                column(LoansCategorySASRA_Loans; Loans."Loans Category-SASRA")
                {
                }
                column(ScheduleBalance; ScheduleBalance)
                {
                }
                column(IssuedDate_Loans; Loans."Issued Date")
                {
                }
                column(DueDate; DueDate)
                {
                }
                column(AmountinArrears_Loans; LoanArrears)
                {
                }
                column(Client_Code; "Client Code")
                { }
                trigger OnPreDataItem();
                begin
                    // Loans.SetFilter(Loans."Date filter", Customer.GetFilter(Customer."Date Filter"));
                    // LoanArrears := 0;
                    // ScheduleBalance := 0;
                    // DueDate := 0D;
                    // Loans.ModifyAll("Amount in Arrears", 0);
                end;

                // trigger OnAfterGetRecord();
                // begin
                //     ScheduleBalance := 0;

                //     if LoanSetup.Get(Loans."Loan Product Type") then
                //         LoanName := LoanSetup."Product Description";

                //     if DateFilterBF <> '' then begin
                //         LoansR.Reset();
                //         LoansR.SetRange(LoansR."Loan  No.", Loans."Loan  No.");
                //         LoansR.SetFilter(LoansR."Date filter", DateFilterBF);

                //         if LoansR.Find('-') then begin
                //             LoansR.CalcFields(LoansR."Outstanding Balance", LoansR."Oustanding Interest");
                //             PrincipleBF := LoansR."Outstanding Balance";
                //             InterestBF := LoansR."Oustanding Interest";
                //         end;
                //     end;

                //     Loans.CalcFields("Outstanding Balance", "Oustanding Interest");
                //     DueDate := CalcDate(Format(Loans.Installments) + 'M', Loans."Issued Date");

                //     if (Loans."Outstanding Balance" + Loans."Oustanding Interest") <= 0 then
                //         CurrReport.Skip;

                //     LoanRepaymentSchedule.Reset();
                //     LoanRepaymentSchedule.SetRange("Loan No.", Loans."Loan  No.");
                //     LoanRepaymentSchedule.SetFilter("Repayment Date", '<=%1', Today);

                //     if LoanRepaymentSchedule.FindLast() then begin
                //         ScheduleBalance := LoanRepaymentSchedule."Loan Balance";

                //         // Correct Calculation of Amount in Arrears
                //         LoanArrears := Loans."Outstanding Balance" + Loans."Oustanding Interest" + ScheduleBalance;
                //         if LoanArrears < 0 then
                //             LoanArrears := 0;

                //         TotalArrears := TotalArrears + LoanArrears;

                //         // Modify all matching records
                //         LoansR.Reset();
                //         LoansR.SetRange(LoansR."Loan  No.", Loans."Loan  No.");
                //         //LoansR.SetFilter(LoansR."Date filter", DateFilterBF);

                //         if LoansR.FindSet() then begin
                //             repeat
                //                 LoansR."Amount in Arrears" := LoanArrears;
                //                 LoansR.Modify();
                //             until LoansR.Next() = 0;
                //         end;

                //         DefaultNotices.Reset();
                //         DefaultNotices.SetRange("Loan In Default", Loans."Loan  No.");
                //         if DefaultNotices.FindFirst() then begin
                //             DefaultNotices."Amount in Arrears" := LoanArrears;
                //             DefaultNotices."Oustanding Interest" := Loans."Oustanding Interest";
                //             DefaultNotices.Modify();
                //         end;
                //     end;
                // end;

                trigger OnAfterGetRecord()
                begin
                    ScheduleBalance := 0;

                    if LoanSetup.Get(Loans."Loan Product Type") then
                        LoanName := LoanSetup."Product Description";

                    if DateFilterBF <> '' then begin
                        LoansR.Reset();
                        LoansR.SetRange(LoansR."Loan  No.", Loans."Loan  No.");
                        LoansR.SetFilter(LoansR."Date filter", DateFilterBF);

                        if LoansR.Find('-') then begin
                            LoansR.CalcFields(LoansR."Outstanding Balance", LoansR."Oustanding Interest");
                            PrincipleBF := LoansR."Outstanding Balance";
                            InterestBF := LoansR."Oustanding Interest";
                        end;
                    end;

                    Loans.CalcFields("Outstanding Balance", "Oustanding Interest");
                    DueDate := CalcDate(Format(Loans.Installments) + 'M', Loans."Issued Date");

                    if (Loans."Outstanding Balance" + Loans."Oustanding Interest") <= 0 then
                        CurrReport.Skip;

                    LoanRepaymentSchedule.Reset();
                    LoanRepaymentSchedule.SetRange("Loan No.", Loans."Loan  No.");

                    // Find the first repayment schedule (earliest date)
                    if LoanRepaymentSchedule.FindFirst() then begin
                        if Today < LoanRepaymentSchedule."Repayment Date" then begin
                            // No repayment due yet
                            LoanArrears := 0;
                            exit;
                        end;
                    end;

                    // If repayment date has passed, find the latest schedule up to today
                    LoanRepaymentSchedule.Reset();
                    LoanRepaymentSchedule.SetRange("Loan No.", Loans."Loan  No.");
                    LoanRepaymentSchedule.SetFilter("Repayment Date", '<=%1', Today);

                    if LoanRepaymentSchedule.FindLast() then
                        ScheduleBalance := LoanRepaymentSchedule."Loan Balance"
                    else
                        ScheduleBalance := 0;

                    // Correct calculation of Amount in Arrears
                    LoanArrears := Loans."Oustanding Interest" + (Loans."Outstanding Balance" - ScheduleBalance);
                    if LoanArrears < 0 then
                        LoanArrears := 0;

                    //       Message('Amount in ARREars %1, Schedule balance of %2, Approved amount %3, outstanding interest', LoanArrears, ScheduleBalance, Loans."Approved Amount", Loans."Oustanding Interest");

                    // Pass 1: Reset all fields to 0 for this loan
                    LoansR.Reset();
                    LoansR.SetRange("Loan  No.", Loans."Loan  No.");

                    if LoansR.FindSet() then
                        repeat
                            LoansR."Amount in Arrears" := 0;
                            LoansR."Oustanding Interest" := 0;
                            LoansR.Modify();
                        until LoansR.Next() = 0;

                    // Pass 2: Update relevant record(s) with correct arrears
                    LoansR.Reset();
                    LoansR.SetRange("Loan  No.", Loans."Loan  No.");
                    // Optionally add filters to update only the most recent record if needed

                    if LoansR.FindSet() then
                        repeat
                            LoansR."Amount in Arrears" := LoanArrears;
                            LoansR."Oustanding Interest" := Loans."Oustanding Interest";
                            LoansR.Modify();
                        until LoansR.Next() = 0;


                    DefaultNotices.Reset();
                    DefaultNotices.SetRange("Loan In Default", Loans."Loan  No.");
                    if DefaultNotices.FindLast() then begin
                        DefaultNotices."Amount in Arrears" := LoanArrears;
                        DefaultNotices."Outstanding Interest" := Loans."Oustanding Interest";
                        DefaultNotices.Modify();
                        COMMIT;
                    end;
                    // Message('DefaultNotices AMount in arrears %1', DefaultNotices."Amount In Arrears");
                end;

            }
        }
    }


    requestpage
    {
        SaveValues = false;
        layout
        {
        }
    }

    trigger OnPreReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);


    end;

    var
        DefaultNotices: Record "Default Notices Register";
        OpenBalance: Decimal;
        CLosingBalance: Decimal;
        OpenBalanceXmas: Decimal;
        CLosingBalanceXmas: Decimal;
        Cust: Record Customer;
        OpeningBal: Decimal;
        ClosingBal: Decimal;
        FirstRec: Boolean;
        PrevBal: Integer;
        BalBF: Decimal;
        LoansR: Record "Loans Register";
        DateFilterBF: Text[150];
        SharesBF: Decimal;
        InsuranceBF: Decimal;
        LoanBF: Decimal;
        PrincipleBF: Decimal;
        InterestBF: Decimal;
        ShowZeroBal: Boolean;
        ClosingBalSHCAP: Decimal;
        ShareCapBF: Decimal;
        RiskBF: Decimal;
        DividendBF: Decimal;
        Company: Record "Company Information";
        OpenBalanceHse: Decimal;
        CLosingBalanceHse: Decimal;
        OpenBalanceDep1: Decimal;
        CLosingBalanceDep1: Decimal;
        OpenBalanceDep2: Decimal;
        CLosingBalanceDep2: Decimal;
        HseBF: Decimal;
        Dep1BF: Decimal;
        Dep2BF: Decimal;
        OpeningBalInt: Decimal;
        ClosingBalInt: Decimal;
        InterestPaid: Decimal;
        SumInterestPaid: Decimal;
        OpenBalanceRisk: Decimal;
        CLosingBalanceRisk: Decimal;
        OpenBalanceDividend: Decimal;
        ClosingBalanceDividend: Decimal;
        OpenBalanceHoliday: Decimal;
        ClosingBalanceHoliday: Decimal;
        LoanSetup: Record "Loan Products Setup";
        LoanName: Text[50];
        SaccoEmp: Record "Sacco Employers";
        EmployerName: Text[100];
        LoanArrears: Decimal;
        LoanRepaymentSchedule: Record "Loan Repayment Schedule";
        TotalArrears: Decimal;
        ScheduleBalance: Decimal;
        DueDate: Date;

    trigger OnInitReport();
    begin
        ;
    end;

}
