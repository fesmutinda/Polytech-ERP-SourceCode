#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 51900 "RecoverLetterto loanee"
{
    WordLayout = './Layouts/RecoverLettertoloanee.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(LoansREC; "Loans Register")
        {
            RequestFilterFields = "Loan  No.", "Last Pay Date", "Client Code";
            column(ReportForNavId_1102755000; 1102755000) { } // Autogenerated by ForNav - Do not delete
            column(CompanyName; CompanyInformation.Name)
            {
            }
            column(CompanyAddress; CompanyInformation.Address)
            {
            }
            column(City; CompanyInformation.City)
            {
            }
            column(CompanyPhoneNo; CompanyInformation."Phone No.")
            {
            }
            column(E_mail; CompanyInformation."E-Mail")
            {
            }
            column(CPic; CompanyInformation.Picture)
            {
            }
            column(Name; Customer.Name)
            {
            }
            column(LoanDisbursementDate_LoansREC; Format(LoansREC."Loan Disbursement Date"))
            {
            }
            column(ApprovedAmount_LoansREC; LoansREC."Approved Amount")
            {
            }
            column(Outstanding_Bal; Lbal)
            {
            }
            column(Interest_Due; INTBAL)
            {
            }
            column(LoanProductTypeName_LoansREC; LoansREC."Loan Product Type Name")
            {
            }
            column(Installments_LoansREC; LoansREC.Installments)
            {
            }
            column(AmountinArrears_LoansREC; LoansREC."Amount in Arrears")
            {
            }
            column(RemainingPeriod; RemainingPeriod)
            {
            }
            dataitem(Customer; Customer)
            {
                DataItemLink = "No." = field("Client Code");
                RequestFilterFields = "No.";
                column(ReportForNavId_1102755005; 1102755005) { } // Autogenerated by ForNav - Do not delete
                column(DearM; DearM)
                {
                }


                trigger OnAfterGetRecord();
                var
                    workString: Text[50];
                begin
                    workString := ConvertStr(Customer.Name, ' ', ',');
                    DearM := SelectStr(1, workString);
                    LastPDate := 0D;
                    Balance := 0;
                    SharesB := 0;
                    // // IF SendSMS = TRUE THEN BEGIN
                    // // //SMS MESSAGE
                    // //	  SMSMessage.RESET;
                    // //	  IF SMSMessage.FIND('+') THEN BEGIN
                    // //	  iEntryNo:=SMSMessage."Entry No";
                    // //	  iEntryNo:=iEntryNo+1;
                    // //	  END
                    // //	  ELSE BEGIN
                    // //	  iEntryNo:=1;
                    // //	  END;
                    // //
                    // //	  SMSMessage.RESET;
                    // //	  SMSMessage.INIT;
                    // //	  SMSMessage."Entry No":=iEntryNo;
                    // //	  SMSMessage."Account No":=Loans."Client Code";
                    // //	  SMSMessage."Date Entered":=TODAY;
                    // //	  SMSMessage."Time Entered":=TIME;
                    // //	  SMSMessage.Source:='LOAN DEF1';
                    // //	  SMSMessage."Entered By":=UserId;
                    // //	  SMSMessage."Sent To Server":=SMSMessage."Sent To Server"::No;
                    // //	  SMSMessage."SMS Message":='Defaulter First Notice: You have defaulted Loan No. '
                    // //	  + Loans."Loan  No."+' of KSHs.'+FORMAT(Loans."Approved Amount")+
                    // //								' at Polytech SACCO LTD. ';
                    // //	  Cust.RESET;
                    // //	  IF Cust.GET(Loans."Client Code") THEN
                    // //	  SMSMessage."Telephone No":=Cust."Phone No.";
                    // //	  SMSMessage.INSERT;
                    // //
                    // // END;
                end;

            }
            dataitem(Loans; "Loans Register")
            {
                DataItemLink = "Loan  No." = field("Loan  No.");
                DataItemTableView = where("Outstanding Balance" = filter(> 0));

            }
            dataitem("Loan Guarantors"; "Loans Guarantee Details")
            {
                DataItemLink = "Loan No" = field("Loan  No.");
                DataItemTableView = where(Substituted = filter(false));
                // column(ReportForNavId_1000000003; 1000000003) { } // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_LoanGuarantors; ReportForNavWriteDataItem('LoanGuarantors', "Loan Guarantors")) { }
                column(Outstanding_Bal2; Lbal)
                {
                }
                column(Interest_Due2; INTBAL)
                {
                }
                trigger OnPreDataItem();
                begin
                    intcount := intcount + 1;
                    TGrAmount := 0;
                    GrAmount := 0;
                    FGrAmount := 0;
                    Amount2 := 0;
                end;

                trigger OnAfterGetRecord();
                begin
                    PersonalNo := '';
                    GAddress := '';
                    if Cust.Get("Loan Guarantors"."Member No") then begin
                        PersonalNo := Cust."Personal No";
                        GAddress := Cust.Address + ' ' + Cust."Address 2" + ' ' + Cust.City;
                        // // IF SendSMS = TRUE THEN BEGIN
                        // // //SMS MESSAGE
                        // //	  SMSMessage.RESET;
                        // //	  IF SMSMessage.FIND('+') THEN BEGIN
                        // //	  iEntryNo:=SMSMessage."Entry No";
                        // //	  iEntryNo:=iEntryNo+1;
                        // //	  END
                        // //	  ELSE BEGIN
                        // //	  iEntryNo:=1;
                        // //	  END;
                        // //
                        // //	  SMSMessage.RESET;
                        // //	  SMSMessage.INIT;
                        // //	  SMSMessage."Entry No":=iEntryNo;
                        // //	  SMSMessage."Account No":="Loan Guarantors"."Member No";
                        // //	  SMSMessage."Date Entered":=TODAY;
                        // //	  SMSMessage."Time Entered":=TIME;
                        // //	  SMSMessage.Source:='LOAN DEF1';
                        // //	  SMSMessage."Entered By":=USERID;
                        // //	  SMSMessage."Sent To Server":=SMSMessage."Sent To Server"::No;
                        // //	  SMSMessage."SMS Message":='Defaulter First Notice: This is to notify you that '
                        // //	  + LoansREC."Client Name"+' has defaulted a loan you had guaranteed of KSHs.'+FORMAT(Loans."Approved Amount")+
                        // //								' at Polytech SACCO LTD. ';
                        // //	  Cust1.RESET;
                        // //	  IF Cust1.GET("Loan Guarantors"."Member No") THEN
                        // //	  SMSMessage."Telephone No":=Cust1."Phone No.";
                        // //	  SMSMessage.INSERT;
                        // // END;
                    end;
                    LoanGuar.Reset;
                    LoanGuar.SetRange(LoanGuar."Loan No", Loans."Loan  No.");
                    if LoanGuar.Find('-') then begin
                        LoanGuar.Reset;
                        LoanGuar.SetRange(LoanGuar."Loan No", Loans."Loan  No.");
                        repeat
                            TGrAmount := TGrAmount + GrAmount;
                            GrAmount := LoanGuar."Amont Guaranteed";
                            //LoanGuar."Amount Guarnted";
                            FGrAmount := TGrAmount + LoanGuar."Amont Guaranteed";
                        //Amount2:=(GrAmount/FGrAmount)*(Lbal+INTBAL+COMM);
                        until LoanGuar.Next = 0;
                    end;
                    //Defaulter loan clear
                    Loans.CalcFields(Loans."Outstanding Balance", Loans."Interest Due");
                    Lbal := ROUND(Loans."Outstanding Balance", 0.5, '=');
                    INTBAL := Loans."Interest Due";
                    COMM := Loans."Interest Due" * 0.5;
                    //MESSAGE('BALANCE %1',Lbal);
                    //commisision
                    LoanGuar.Reset;
                    LoanGuar.SetRange(LoanGuar."Loan No", Loans."Loan  No.");
                    if LoanGuar.Find('-') then begin
                        LoanGuar.Reset;
                        LoanGuar.SetRange(LoanGuar."Loan No", Loans."Loan  No.");
                        //DLN:='DLN';
                        repeat
                            GenSetUp.Get();
                            GenSetUp."Defaulter LN" := GenSetUp."Defaulter LN" + 10;
                            GenSetUp.Modify;
                            //DLN:='DLN'+FORMAT(GenSetUp."Defaulter LN");
                            //GrAmount:=LoanGuar."Amount Guarnted";
                            //FGrAmount:=FGrAmount+LoanGuar."Amount Guarnted";
                            //LoanGuar."Amount Guarnted";
                            //TGrAmount:=TGrAmount+GrAmount;
                            //Amount2:=(GrAmount/FGrAmount)*(Lbal+INTBAL+COMM);
                            //MESSAGE('guarnteed Amount %1',FGrAmount);
                            //REPEAT
                            ////Insert jnl lines
                            Cust.Reset;
                            Cust.SetRange(Cust."No.", LoanGuar."Member No");
                            if Cust.Find('-') then begin
                                Loans."Client Name" := Cust.Name;
                            end;
                        until LoanGuar.Next = 0;
                    end;
                end;

            }
            trigger OnPreDataItem();
            begin
                //SenderName:='KANISA';
                CompanyInformation.Get();
                CompanyInformation.CalcFields(CompanyInformation.Picture);
            end;

            trigger OnAfterGetRecord();
            begin
                Cust.Reset;
                Cust.SetRange(Cust."No.", LoansREC."Client Code");
                if Cust.Find('-') then begin
                    PhoneNo := Cust."Phone No.";
                    // // SMSMessage.RESET;
                    // //	  IF SMSMessage.FIND('+') THEN BEGIN
                    // //	  iEntryNo:=SMSMessage."Entry No";
                    // //	  iEntryNo:=iEntryNo+1;
                    // //	  END
                    // //	  ELSE BEGIN
                    // //	  iEntryNo:=1;
                    // //	  END;
                    // //
                    // //	  SMSMessage.RESET;
                    // //	  SMSMessage.INIT;
                    // //	  SMSMessage."Entry No":=iEntryNo;
                    // //	  SMSMessage."Account No":=LoansREC."Client Code";
                    // //	  SMSMessage."Date Entered":=TODAY;
                    // //	  SMSMessage."Time Entered":=TIME;
                    // //	  SMSMessage.Source:='LOAN DEF1';
                    // //	  SMSMessage."Entered By":=USERID;
                    // //	  SMSMessage."Sent To Server":=SMSMessage."Sent To Server"::No;
                    // //	  SMSMessage."SMS Message":='Defaulter First Notice: Dear ,' +LoansREC."Client Name"+ ' have defaulted  '
                    // //	  + LoansREC."Loan Product Type Name"+' of Outstanding balance KSHs.'+FORMAT(LoansREC."Amount in Arrears")+
                    // //								' at Polytech SACCO LTD. ';
                    // //
                    // //	  SMSMessage."Telephone No":=PhoneNo;
                    // //	  Cust.RESET;
                    // //	  IF Cust.GET(Loans."Client Code") THEN
                    // //	  SMSMessage."Telephone No":=PhoneNo;
                    // //	  SMSMessage.INSERT;
                    // //
                    // MESSAGE (FORMAT(PhoneNo));
                    //*********************************************************************
                    RemainingPeriod := LoansREC.Installments - ObjSwizzsoftFactory.KnGetCurrentPeriodForLoan(LoansREC."Loan  No.");
                    recoverNoticedate := CalcDate('1M', Today);
                    MemberLedgerEntry.Reset;
                    MemberLedgerEntry.SetRange("Loan No", LoansREC."Loan  No.");
                    if MemberLedgerEntry.FindLast() then begin
                        if (MemberLedgerEntry."Transaction Type" = MemberLedgerEntry."transaction type"::"Loan Repayment") or
                          (MemberLedgerEntry."Transaction Type" = MemberLedgerEntry."transaction type"::"Interest Paid") then
                            LastPayDate := MemberLedgerEntry."Posting Date";
                    end;
                    if LastPayDate = 0D then
                        LastPayDate := LoansREC."Issued Date";
                    LoansREC.CalcFields(LoansREC."Outstanding Balance", LoansREC."Oustanding Interest", LoansREC."No. Of Guarantors");
                    NoGuarantors := LoansREC."No. Of Guarantors";
                    if NoGuarantors = 0 then
                        NoGuarantors := 1;
                    LBalance := LoansREC."Outstanding Balance" + LoansREC."Oustanding Interest";
                    LBalance1 := LoansREC."Outstanding Balance";
                    Notified := true;
                    //LoansREC."Notified date":=TODAY;
                    Modify;
                    Balance := Balance - (LoansREC."Outstanding Balance" + LoansREC."Oustanding Interest");
                    SharesB := SharesB - (LoansREC."Outstanding Balance" + LoansREC."Oustanding Interest");
                    if SharesB < 0 then
                        BalanceType := 'Debit Balance'
                    else
                        BalanceType := 'Credit Balance';
                    LoanGuar.Reset;
                    LoanGuar.SetRange(LoanGuar."Loan No", LoansREC."Loan  No.");
                    if LoanGuar.Find('-') then begin
                        LoanGuar.Reset;
                        LoanGuar.SetRange(LoanGuar."Loan No", LoansREC."Loan  No.");
                        repeat
                            TGrAmount := TGrAmount + GrAmount;
                            GrAmount := LoanGuar."Amont Guaranteed";
                            //LoanGuar."Amount Guarnted";
                            FGrAmount := TGrAmount + LoanGuar."Amont Guaranteed";
                        until LoanGuar.Next = 0;
                    end;
                    //Defaulter loan clear
                    LoansREC.CalcFields(LoansREC."Outstanding Balance", LoansREC."Interest Due", LoansREC."Oustanding Interest");
                    Lbal := ROUND(LoansREC."Outstanding Balance", 0.5, '=');
                    INTBAL := LoansREC."Oustanding Interest";
                    COMM := LoansREC."Oustanding Interest" * 0.5;
                    //MESSAGE('BALANCE %1',Lbal);
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }
    var
        PhoneNo: Code[20];
        intcount: Integer;
        Balance: Decimal;
        SenderName: Text[150];
        DearM: Text[60];
        BalanceType: Text[100];
        SharesB: Decimal;
        LastPDate: Date;
        Notified: Boolean;
        LoansR: Record "Loans Register";
        SharesAlllocated: Decimal;
        ABFAllocated: Decimal;
        LBalance: Decimal;
        PersonalNo: Code[50];
        GAddress: Text[250];
        Cust: Record Customer;
        TotalRec: Decimal;
        NoGuarantors: Integer;
        AmountT: Decimal;
        LoanGuar: Record "Loans Guarantee Details";
        TGrAmount: Decimal;
        GrAmount: Decimal;
        FGrAmount: Decimal;
        Lbal: Decimal;
        INTBAL: Decimal;
        COMM: Decimal;
        GenSetUp: Record "Sacco General Set-Up";
        Amount2: Decimal;
        LBalance1: Decimal;
        SendSMS: Boolean;
        SMSMessage: Record "SMS Messages";
        iEntryNo: Integer;
        Cust1: Record Customer;
        CompanyInformation: Record "Company Information";
        //ObjCollateral: Record UnknownRecord51516374;
        ObjGuarantor: Record "Loans Guarantee Details";
        VarGuarantorSecurity: Boolean;
        VarCollateralSecurity: Code[50];
        VarSecurityUsed: Code[50];
        VarAmountinArrears: Decimal;
        ObjSwizzsoftFactory: Codeunit "Swizzsoft Factory.";
        ObjLoanType: Record "Loan Products Setup";
        VarPenaltyPercentage: Decimal;
        MemberLedgerEntry: Record "Cust. Ledger Entry";
        LastPayDate: Date;
        RemainingPeriod: Integer;
        recoverNoticedate: Date;


}
