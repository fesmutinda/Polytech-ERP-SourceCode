#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 51902 "Dividend Transfer To ArreaLoan"
{
    WordLayout = './Layouts/DividendTransferToArreaLoan.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem("Dividends Registerd"; "Dividends Registerd")
        {
            DataItemTableView = where("Pay to Loan" = filter(True));
            RequestFilterFields = "Member No";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
                                            //column(ReportForNav_"Dividends Registerd"; ReportForNavWriteDataItem('"Dividends Registerd"',"Dividends Registerd")) {}
            trigger OnPreDataItem();
            begin
                BATCH_TEMPLATE := 'GENERAL';
                BATCH_NAME := 'DIVIDEND';
                DOCUMENT_NO := 'DIVIDEND';
                ObjGensetup.Get();
                //PostingDate:=TODAY;
                GenJournalLine.Reset;
                GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                GenJournalLine.DeleteAll;
                //ReportForNav.OnPreDataItem('"Dividends Registerd"', "Dividends Registerd");
            end;

            trigger OnAfterGetRecord();
            begin
                ObjGensetup.Get();
                RunBal := 0;
                Pfee := 0;
                PfeeEX := 0;
                LoanAmount := 0;
                //Initialize Poosting==============================================================================
                BATCH_TEMPLATE := 'GENERAL';
                BATCH_NAME := 'DIVIDEND';
                DOCUMENT_NO := 'DIVIDEND';
                ObjGensetup.Get();
                PostingDate := Today;
                amountpayable := 0;
                if "Dividends Registerd"."Pay to Loan" = true then begin
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", "Dividends Registerd"."Member No");
                    if Cust.Find('-') then
                        Cust.CalcFields("Dividend Amount");
                    // IF Cust."Dividend Amount" > "Dividends Registerd"."Amount To Loan" THEN
                    // RunnAmount:="Dividends Registerd"."Amount To Loan"
                    // ELSE
                    //RunnAmount := Cust."Dividend Amount";
                    amountpayable := Cust."Dividend Amount";
                    TotalAmount := 0;
                    InterestAmount := 0;
                    outstandingBal := 0;
                    RunBal := 0;
                    RunnAmount := 0;
                    LoansReg.Reset;
                    LoansReg.SetRange("Client Code", "Dividends Registerd"."Member No");
                    LoansReg.SetAutocalcFields(LoansReg."Outstanding Balance", LoansReg."Oustanding Interest");
                    if LoansReg.Find('-') then begin
                        repeat
                            if LoansReg."Amount in Arrears" > 0 then begin
                                // MESSAGE('cj TotalAmount is %1.....|...cj amoontpay is %2',TotalAmount,amountpayable);
                                RunBal := amountpayable - TotalAmount;
                                // MESSAGE('cj runbal  is %1',RunBal);
                                //  MESSAGE('Amount in arrears is %1',LoansReg."Amount in Arrears");
                                if LoansReg."Amount in Arrears" < RunBal then begin
                                    RunnAmount := LoansReg."Amount in Arrears"
                                end else if LoansReg."Amount in Arrears" > RunBal then begin
                                    RunnAmount := RunBal;
                                end;
                                if RunnAmount > 0 then begin
                                    // MESSAGE('cj ...Runnamount is %1',RunnAmount);
                                    if LoansReg."Loan Product Type" <> '24' then begin
                                        //...........................................................
                                        if LoansReg."Oustanding Interest" > 0 then begin
                                            if LoansReg."Oustanding Interest" > RunnAmount then
                                                InterestAmount := RunnAmount
                                            else if LoansReg."Oustanding Interest" < RunnAmount then
                                                InterestAmount := LoansReg."Oustanding Interest";
                                            // MESSAGE(' InterestAmount is %1', InterestAmount);
                                            LineNo := LineNo + 10000;
                                            GenJournalLine.Init;
                                            GenJournalLine."Journal Template Name" := BATCH_TEMPLATE;
                                            GenJournalLine."Journal Batch Name" := BATCH_NAME;
                                            GenJournalLine."Document No." := DOCUMENT_NO;
                                            GenJournalLine."Line No." := LineNo;
                                            GenJournalLine."Account Type" := GenJournalLine."account type"::Customer;
                                            GenJournalLine."Account No." := LoansReg."Client Code";
                                            GenJournalLine."Transaction Type" := GenJournalLine."transaction type"::"Interest Paid";
                                            GenJournalLine.Validate(GenJournalLine."Account No.");
                                            GenJournalLine."Posting Date" := Today;
                                            GenJournalLine.Description := 'Dividend payment to Loan ' + Format(Today);
                                            GenJournalLine.Amount := -InterestAmount;
                                            GenJournalLine.Validate(GenJournalLine.Amount);
                                            GenJournalLine."Loan No" := LoansReg."Loan  No.";
                                            GenJournalLine.Validate(GenJournalLine."Transaction Type");
                                            GenJournalLine."Shortcut Dimension 1 Code" := 'BOSA';
                                            if GenJournalLine.Amount <> 0 then
                                                GenJournalLine.Insert;
                                            RunnAmount := RunnAmount - InterestAmount;
                                        end;
                                        TotalAmount := outstandingBal + InterestAmount;
                                        //
                                        //			MESSAGE('here');
                                        //............................................................
                                        if LoansReg."Outstanding Balance" > 0 then begin
                                            //MESSAGE('1RunnAmount is %1 ..',RunnAmount);
                                            if LoansReg."Outstanding Balance" > RunnAmount then
                                                outstandingBal := RunnAmount
                                            else if LoansReg."Outstanding Balance" <= RunnAmount then
                                                outstandingBal := (LoansReg."Outstanding Balance");
                                            //MESSAGE(' outstandingBal is %1',outstandingBal);
                                            LineNo := LineNo + 10000;
                                            GenJournalLine.Init;
                                            GenJournalLine."Journal Template Name" := BATCH_TEMPLATE;
                                            GenJournalLine."Journal Batch Name" := BATCH_NAME;
                                            GenJournalLine."Document No." := DOCUMENT_NO;
                                            GenJournalLine."Line No." := LineNo;
                                            GenJournalLine."Account Type" := GenJournalLine."account type"::Customer;
                                            GenJournalLine."Account No." := LoansReg."Client Code";
                                            GenJournalLine."Transaction Type" := GenJournalLine."transaction type"::"Loan Repayment";
                                            GenJournalLine.Validate(GenJournalLine."Account No.");
                                            GenJournalLine."Posting Date" := Today;
                                            GenJournalLine.Description := 'Dividend payment to Loan ' + Format(Today);
                                            GenJournalLine.Amount := -outstandingBal;
                                            GenJournalLine.Validate(GenJournalLine.Amount);
                                            GenJournalLine."Loan No" := LoansReg."Loan  No.";
                                            GenJournalLine.Validate(GenJournalLine."Transaction Type");
                                            GenJournalLine."Shortcut Dimension 1 Code" := 'BOSA';
                                            if GenJournalLine.Amount <> 0 then
                                                GenJournalLine.Insert;
                                            RunnAmount := RunnAmount - outstandingBal;
                                        end;
                                        //			MESSAGE('end RunBal is  %1',RunnAmount);
                                        ///..............................................................
                                        //**************************************************************************************************
                                        TotalAmount := outstandingBal + InterestAmount;
                                        // MESSAGE('total amount is %1',TotalAmount);
                                        if (LoansReg."Outstanding Balance" > 0) or (LoansReg."Oustanding Interest" > 0) then begin
                                            LineNo := LineNo + 10000;
                                            GenJournalLine.Init;
                                            GenJournalLine."Journal Template Name" := BATCH_TEMPLATE;
                                            GenJournalLine."Journal Batch Name" := BATCH_NAME;
                                            GenJournalLine."Document No." := DOCUMENT_NO;
                                            GenJournalLine."Line No." := LineNo;
                                            GenJournalLine."Account Type" := GenJournalLine."account type"::Customer;
                                            GenJournalLine."Account No." := LoansReg."Client Code";
                                            GenJournalLine."Transaction Type" := GenJournalLine."transaction type"::Dividend;
                                            GenJournalLine.Validate(GenJournalLine."Account No.");
                                            GenJournalLine."Posting Date" := Today;
                                            GenJournalLine.Description := 'Dividend Transfer to Loan ' + Format(Today);
                                            GenJournalLine.Amount := TotalAmount;
                                            GenJournalLine.Validate(GenJournalLine.Amount);
                                            GenJournalLine."Shortcut Dimension 1 Code" := 'BOSA';
                                            if GenJournalLine.Amount <> 0 then
                                                GenJournalLine.Insert;
                                            // RunnAmount:=RunnAmount-TotalAmount;
                                        end;
                                    end;
                                end;
                            end;
                        until LoansReg.Next = 0;
                        // MESSAGE('end RunBal is  %1',RunnAmount);
                    end;
                end;
                GenJournalLine.Reset;
                GenJournalLine.SetRange("Journal Template Name", BATCH_TEMPLATE);
                GenJournalLine.SetRange("Journal Batch Name", BATCH_NAME);
                if GenJournalLine.Find('-') then
       ;
            end;


            trigger OnPostDataItem();
            begin
                Message('Process Complete');
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field(PostingDate; PostingDate)
                {
                    ApplicationArea = Basic;
                    Caption = 'post Date';
                }
            }
        }

    }
    var
        TLoanAmount: Decimal;
        DividendsRegisterd: Record "Dividends Registerd";
        TotalAmount: Decimal;
        amountpayable: Decimal;
        DivProg: Record "Dividends Progression";
        GenSetup: Record "Sacco General Set-Up";
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        LoanCount: Integer;
        LoansReg: Record "Loans Register";
        TotalLoanAmount: Decimal;
        LoanAmount: Decimal;
        LoanInt: Decimal;
        Sdividend: Decimal;
        RunBal: Decimal;
        Pfee: Decimal;
        PfeeEX: Decimal;
        Cust: Record Customer;
        StartDate: Date;
        DateFilter: Text[100];
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text[100];
        ToDateS: Text[100];
        DivTotal: Decimal;
        CDeposits: Decimal;
        CustDiv: Record Customer;
        CDiv: Decimal;
        CInterest: Decimal;
        BDate: Date;
        CustR: Record Customer;
        IntRebTotal: Decimal;
        CIntReb: Decimal;
        LineNo: Integer;
        Gnjlline: Record "Gen. Journal Line";
        PostingDate: Date;
        "W/Tax": Decimal;
        CommDiv: Decimal;
        GenJournalLine: Record "Gen. Journal Line";
        SFactory: Codeunit "Swizzsoft Factory.";
        BATCH_NAME: Code[50];
        BATCH_TEMPLATE: Code[50];
        DOCUMENT_NO: Code[50];
        ObjGensetup: Record "Sacco General Set-Up";
        RunnAmount: Decimal;
        InterestAmount: Decimal;
        OutBalAmount: Decimal;
        outstandingBal: Decimal;



    // --> Reports ForNAV Autogenerated code - do not delete or modify
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
