#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 51036 "Loans Defaulter Aging"
{
    RDLCLayout = './Layout/LoansDefaulterAging.rdl';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loans Register"; "Loans Register")
        {
            CalcFields = "Outstanding Balance", "Last Pay Date";
            DataItemTableView = where("Outstanding Balance" = filter(> 0), Posted = const(true), Reversed = const(false));
            RequestFilterFields = "Loan  No.", "Client Code", "Outstanding Balance", "Date filter", "Account No";
            // column(ReportForNavId_4645; 4645) { } // Autogenerated by ForNav - Do not delete
            // column(ReportForNav_Table51516371; ReportForNavWriteDataItem('Table51516371', UnknownTable51516371)) { }
            column(Company_Letter_Head; Company.Picture)
            {
            }
            column(Loans__Loan__No__; "Loan  No.")
            {
            }
            column(Loans__Client_Name_; "Client Name")
            {
            }
            column(ClientCode_LoansRegister; "Loans Register"."Client Code")
            {
            }
            column(Loans_Loans__Outstanding_Balance_; "Loans Register"."Outstanding Balance")
            {
            }
            column(V2Month_; "2Month")
            {
            }
            column(V3Month_; "3Month")
            {
            }
            column(Over3Month; Over3Month)
            {
            }
            column(V1Month_; "1Month")
            {
            }
            column(V0Month_; "0Month")
            {
            }
            column(AmountinArrears_LoansRegister; "Loans Register"."Amount in Arrears")
            {
            }
            column(LoanProductType; "Loans Register"."Loan Product Type")
            {
            }
            column(AsAt; AsAt)
            {
            }
            column(Days; "NoOfDaysinArrears")
            {
            }
            trigger OnPreDataItem();
            begin

                GrandTotal := 0;
                Company.Get();
                Company.CalcFields(Company.Picture);
                //MESSAGE('bado kaka %1',"Loans Register"."Loan  No.");
                if AsAt = 0D then
                    DFilter := '..' + Format(AsAt);
                "Loans Register".SetFilter("Loans Register"."Date filter", DFilter);
                "Loans Register".SetFilter("Loans Register"."Issued Date", '<=%1', AsAt);
                LoanApp.Reset;
                if LoanApp.FindSet then begin
                    repeat
                        LoanApp.Performing := false;
                        LoanApp.watch := false;
                        LoanApp.Substandard := false;
                        LoanApp.Doubtful := false;
                        LoanApp.loss := false;
                        LoanApp.Modify;
                    until LoanApp.Next = 0;
                end;
            end;

            trigger OnAfterGetRecord();
            begin
                Over3Month := 0; // Inserted by ForNAV
                "3Month" := 0; // Inserted by ForNAV
                "2Month" := 0; // Inserted by ForNAV
                "1Month" := 0; // Inserted by ForNAV
                "0Month" := 0; // Inserted by ForNAV

                // Set Date Filter for loan balance up to the "AsAt" date
                DateFilter := '..' + Format(AsAt);
                Loans.Reset();
                Loans.SetRange("Loan  No.", "Loans Register"."Loan  No.");
                Loans.SetFilter("Date filter", DateFilter);

                if Loans.Find('-') then begin
                    Loans.CalcFields("Outstanding Balance", "Scheduled Principal to Date", "Principal Paid", "Schedule Repayments");
                    LBal := Loans."Outstanding Balance";
                    ScheduledLoanBal := Loans."Scheduled Principal to Date";

                    ExpectedBalance := ROUND(Loans."Approved Amount" - ScheduledLoanBal, 1, '<');
                    Arrears := LBal - ExpectedBalance;

                    if Arrears < 0 then
                        Arrears := 0;
                end;

                // Optionally consider current month's schedule if needed
                LSchedule.Reset();
                LSchedule.SetRange("Loan No.", "Loans Register"."Loan  No.");
                LSchedule.SetRange("Repayment Date", CalcDate('CM', AsAt));

                if LSchedule.FindLast() then
                    ScheduleBal := LSchedule."Loan Amount"
                else
                    ScheduleBal := 0;

                // Optional logic: override if schedule suggests higher expected payment
                if (ScheduleBal > 0) and (Arrears = 0) then begin
                    Arrears := LBal - ScheduleBal;
                    if Arrears < 0 then
                        Arrears := 0;
                end;

                // Final arrears value stored
                "Amount in Arrears" := Arrears;

                // Only calculate days in arrears if there's actually arrears
                if Arrears > 0 then begin
                    if (Loans."Issued Date" <> 0D) and (AsAt <> 0D) then
                        "NoOfDaysinArrears" := AsAt - Loans."Issued Date"
                    else
                        "NoOfDaysinArrears" := 0;
                end else
                    "NoOfDaysinArrears" := 0;

                // Override for loan product type 24
                if Loans."Loan Product Type" = '24' then begin
                    "NoOfDaysinArrears" := 0;
                    "Amount in Arrears" := 0;
                    Arrears := 0;
                end;

                // Classify loan based on NoOfDaysinArrears
                if ("NoOfDaysinArrears" >= 0) and ("NoOfDaysinArrears" <= 90) then begin
                    "Loans Register"."Loans Category" := "Loans Register"."loans category"::Perfoming;
                    "Loans Register"."Loans Category-SASRA" := "Loans Register"."Loans Category-SASRA"::Perfoming;
                end else if ("NoOfDaysinArrears" > 90) and ("NoOfDaysinArrears" <= 360) then begin
                    "Loans Register"."Loans Category" := "Loans Register"."loans category"::Watch;
                    "Loans Register"."Loans Category-SASRA" := "Loans Register"."Loans Category-SASRA"::Watch;
                end else if ("NoOfDaysinArrears" > 360) then begin
                    "Loans Register"."Loans Category" := "Loans Register"."loans category"::Loss;
                    "Loans Register"."Loans Category-SASRA" := "Loans Register"."Loans Category-SASRA"::Loss;
                end;

                // Derive number of months in arrears (rounded up)
                "No of Months in Arrears" := ROUND("NoOfDaysinArrears" / 30, 1, '>');

                // Save changes to Loans Register
                "Loans Register".Modify;

                // Set aging buckets based on the loan category
                case "Loans Register"."Loans Category" of
                    "Loans Register"."loans category"::Perfoming:
                        "0Month" := "Loans Register"."Outstanding Balance";
                    "Loans Register"."loans category"::Watch:
                        "1Month" := "Loans Register"."Outstanding Balance";
                    "Loans Register"."loans category"::Substandard:
                        "2Month" := "Loans Register"."Outstanding Balance";
                    "Loans Register"."loans category"::Doubtful:
                        "3Month" := "Loans Register"."Outstanding Balance";
                    "Loans Register"."loans category"::Loss:
                        Over3Month := "Loans Register"."Outstanding Balance";
                end;


                // Update loan count if in arrears
                if ("1Month" + "2Month" + "3Month" + Over3Month) > 0 then
                    NoLoans := NoLoans + 1;

                // Add to grand total
                GrandTotal := GrandTotal + "Loans Register"."Outstanding Balance";
                //Message('Loans Register classification of %1 and grand total of %2', "Loans Register"."Loans Category", GrandTotal);




            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field("As At"; AsAt)
                {
                    ApplicationArea = Basic;
                }

            }
        }

    }
    var
        LoanApp: Record "Loans Register";
        DFilter: Text;
        "1Month": Decimal;
        instalMade: Integer;
        LoanPrincipleNew: Decimal;
        ScheduleBal: Decimal;
        "2Month": Decimal;
        "3Month": Decimal;
        Over3Month: Decimal;
        ShowLoan: Boolean;
        AsAt: Date;
        LastDueDate: Date;
        DFormula: DateFormula;
        "0MonthC": Integer;
        "1MonthC": Integer;
        "2MonthC": Integer;
        "3MonthC": Integer;
        Over3MonthC: Integer;
        NoLoans: Integer;
        PhoneNo: Text[30];
        Cust: Record Customer;
        "StaffNo.": Text[30];
        Deposits: Decimal;
        GrandTotal: Decimal;
        "0Month": Decimal;
        LoanProduct: Record "Loan Products Setup";
        FirstMonthDate: Date;
        EndMonthDate: Date;
        Loans_Aging_Analysis__SASRA_CaptionLbl: label 'Loans Aging Analysis (SASRA)';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Loan_TypeCaptionLbl: label 'Loan Type';
        Staff_No_CaptionLbl: label 'Staff No.';
        Oustanding_BalanceCaptionLbl: label 'Oustanding Balance';
        PerformingCaptionLbl: label 'Performing';
        V1___30_Days_CaptionLbl: label '(1 - 30 Days)';
        V0_Days_CaptionLbl: label '(0 Days)';
        WatchCaptionLbl: label 'Watch';
        V31___180_Days_CaptionLbl: label '(31 - 180 Days)';
        SubstandardCaptionLbl: label 'Substandard';
        V181___360_Days_CaptionLbl: label '(181 - 360 Days)';
        DoubtfulCaptionLbl: label 'Doubtful';
        Over_360_DaysCaptionLbl: label 'Over 360 Days';
        LossCaptionLbl: label 'Loss';
        TotalsCaptionLbl: label 'Totals';
        CountCaptionLbl: label 'Count';
        Grand_TotalCaptionLbl: label 'Grand Total';
        "0Day": Decimal;
        "1Day": Decimal;
        "2Day": Decimal;
        "3Day": Decimal;
        Over3Day: Decimal;
        LSchedule: Record "Loan Repayment Schedule";
        RepaymentPeriod: Date;
        Loans: Record "Loans Register";
        LastMonth: Date;
        ScheduledLoanBal: Decimal;
        DateFilter: Text;
        LBal: Decimal;
        Arrears: Decimal;
        "NoOfDaysinArrears": Integer;
        Company: Record "Company Information";
        SFactory: Codeunit "SWIZZSFT Factory";
        ExpectedBalance: Decimal;
        Numberofdays: Integer;
    // GenSetUp: Record UnknownRecord51516398;
    // SMSMessage: Record UnknownRecord51516471;
    // iEntryNo: Integer;
    // CompInfo: Record "Company Information";
    // Membereg: Record UnknownRecord51516364;
    trigger OnPreReport()
    begin
        Company.get;
        Company.CalcFields(Picture);
    end;


}
