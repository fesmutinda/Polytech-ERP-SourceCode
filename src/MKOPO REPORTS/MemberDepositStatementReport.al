#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 51047 "Member Account Statement-dep"
{
    RDLCLayout = './Layout/MemberAccountStatement-dep.rdl';
    DefaultLayout = RDLC;
    Caption = 'Member Deposits Statement';

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "No.", "Loan Product Filter", "Outstanding Balance", "Date Filter";
            //column(ReportForNavId_1102755000; 1102755000) { } // Autogenerated by ForNav - Do not delete
            //column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer', Customer)) { }
            column(USERID; UserId)
            {
            }
            column(No_Members; Customer."No.")
            {
            }
            column(Name_Members; Customer.Name)
            {
            }
            column(PhoneNo_MemberRegister; Customer."Phone No.")
            {
            }
            column(EmployerName; EmployerName)
            {
            }
            // column(PageNo_Members; ReportForNav.PagePlaceHolder)
            // {
            // }
            column(IDNo_Members; Customer."ID No.")
            {
            }
            column(Company_Name; Company.Name)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address_2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(Company_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            dataitem(ShareCapital; "Cust. Ledger Entry")
            {
                DataItemLink = "Customer No." = field("No."), "Posting Date" = field("Date Filter");
                DataItemTableView = sorting("Posting Date") where("Transaction Type" = filter("Share Capital"));
                // column(ReportForNavId_1000000009; 1000000009) {} // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_ShareCapital; ReportForNavWriteDataItem('ShareCapital',ShareCapital)) {}
                trigger OnPreDataItem();
                begin
                    ClosingBalanceShareCap := ShareCapBF;
                    OpenBalanceShareCap := ShareCapBF;
                    //ReportForNav.OnPreDataItem('ShareCapital',ShareCapital);
                end;

                trigger OnAfterGetRecord();
                begin
                    ClosingBalanceShareCap := ClosingBalanceShareCap + (ShareCapital.Amount * -1);
                end;

            }
            dataitem(Deposits; "Cust. Ledger Entry")
            {
                DataItemLink = "Customer No." = field("No."), "Posting Date" = field("Date Filter");
                DataItemTableView = sorting("Posting Date") where("Transaction Type" = filter("Deposit Contribution"));
                // column(ReportForNavId_1000000036; 1000000036) {} // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Deposits; ReportForNavWriteDataItem('Deposits',Deposits)) {}
                column(PostingDate_Deposits; Deposits."Posting Date")
                {
                }
                column(DocumentNo_Deposits; Deposits."Document No.")
                {
                }
                column(Description_Deposits; Deposits.Description)
                {
                }
                column(DebitAmount_Deposits; Deposits."Debit Amount")
                {
                }
                column(CreditAmount_Deposits; Deposits."Credit Amount")
                {
                }
                column(TransactionType_Deposits; Deposits."Transaction Type")
                {
                }
                column(ClosingBalanceDeposits; ClosingBalanceDeposits)
                {
                }
                column(SharesBF; SharesBF)
                {
                }
                trigger OnPreDataItem();
                begin
                    ClosingBalanceDeposits := SharesBF;
                    OpenBalanceDeposits := SharesBF;
                    // ReportForNav.OnPreDataItem('Deposits', Deposits);
                end;

                trigger OnAfterGetRecord();
                begin
                    ClosingBalanceDeposits := ClosingBalanceDeposits + (Deposits.Amount * -1);
                end;

            }
            dataitem(Dividend; "Cust. Ledger Entry")
            {
                DataItemLink = "Customer No." = field("No."), "Posting Date" = field("Date Filter");
                DataItemTableView = sorting("Posting Date") where("Transaction Type" = filter(Dividend));
                // column(ReportForNavId_1000000059; 1000000059) {} // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Dividend; ReportForNavWriteDataItem('Dividend',Dividend)) {}
                trigger OnPreDataItem();
                begin
                    ClosingBalanceDividend := DividendBF;
                    OpenBalanceDividend := DividendBF;
                    //ReportForNav.OnPreDataItem('Dividend',Dividend);
                end;

                trigger OnAfterGetRecord();
                begin
                    ClosingBalanceDividend := ClosingBalanceDividend + (Dividend.Amount * -1);
                end;

            }
            dataitem(Khoja; "Cust. Ledger Entry")
            {
                DataItemLink = "Customer No." = field("No."), "Posting Date" = field("Date Filter");
                DataItemTableView = sorting("Posting Date") where("Transaction Type" = filter("Insurance Contribution"));
                // column(ReportForNavId_1000000071; 1000000071) {} // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Khoja; ReportForNavWriteDataItem('Khoja',Khoja)) {}
                trigger OnPreDataItem();
                begin
                    ClosingBalanceKhoja := KhojaBF;
                    OpenBalanceKhoja := KhojaBF;
                    //ReportForNav.OnPreDataItem('Khoja',Khoja);
                end;

                trigger OnAfterGetRecord();
                begin
                    ClosingBalanceKhoja := ClosingBalanceKhoja + (Khoja.Amount * -1);
                end;

            }
            dataitem(Loans; "Loans Register")
            {
                DataItemLink = "Client Code" = field("No."), "Date filter" = field("Date Filter"), "Loan Product Type" = field("Loan Product Filter");
                DataItemTableView = sorting("Loan  No.") where(Posted = const(true));
                // column(ReportForNavId_1102755024; 1102755024) { } // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Loans; ReportForNavWriteDataItem('Loans', Loans)) { }
                dataitem(loan; "Cust. Ledger Entry")
                {
                    DataItemLink = "Customer No." = field("Client Code"), "Loan No" = field("Loan  No."), "Posting Date" = field("Date filter");
                    DataItemTableView = sorting("Posting Date") where("Transaction Type" = filter(Loan));
                    // column(ReportForNavId_1102755031; 1102755031) { } // Autogenerated by ForNav - Do not delete
                    // column(ReportForNav_loan; ReportForNavWriteDataItem('loan', loan)) { }
                    trigger OnPreDataItem();
                    begin
                        CLosingBalance := PrincipleBF;
                        OpeningBal := PrincipleBF;
                        //ReportForNav.OnPreDataItem('loan', loan);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        /*CLosingBalance:=CLosingBalance+loan.Amount;
						ClosingBalInt:=ClosingBalInt+loan.Amount;
						//interest
						ClosingBal:=ClosingBal+LoanInterest.Amount;
						OpeningBal:=ClosingBal-LoanInterest.Amount;
						*/
                        CLosingBalance := CLosingBalance + loan.Amount;
                        if Loans."Loan  No." = '' then begin
                        end;
                        if loan."Transaction Type" = loan."transaction type"::"Insurance Contribution" then begin
                            InterestPaid := loan."Credit Amount";
                            SumInterestPaid := InterestPaid + SumInterestPaid;
                        end;
                        if loan."Transaction Type" = loan."transaction type"::"Interest Paid" then begin
                            loan."Credit Amount" := loan."Credit Amount"//+InterestPaid;
                        end;

                    end;

                }
                trigger OnPreDataItem();
                begin
                    Loans.SetFilter(Loans."Date filter", Customer.GetFilter(Customer."Date Filter"));
                    // ReportForNav.OnPreDataItem('Loans', Loans);
                end;

                trigger OnAfterGetRecord();
                begin
                    if LoanSetup.Get(Loans."Loan Product Type") then
                        LoanName := LoanSetup."Product Description";
                    if DateFilterBF <> '' then begin
                        LoansR.Reset;
                        LoansR.SetRange(LoansR."Loan  No.", "Loan  No.");
                        LoansR.SetFilter(LoansR."Date filter", DateFilterBF);
                        //LoansR.SETRANGE(LoansR."Loan Product Type","Loan Product Type");
                        if LoansR.Find('-') then begin
                            LoansR.CalcFields(LoansR."Outstanding Balance");
                            PrincipleBF := LoansR."Outstanding Balance";
                            //InterestBF:=LoansR."Interest Paid";
                        end;
                    end;
                end;

            }
            dataitem("Loans Guarantee Details"; "Loans Guarantee Details")
            {
                DataItemLink = "Member No" = field("No.");
                // column(ReportForNavId_1000000042; 1000000042) {} // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Table51516372; ReportForNavWriteDataItem('Table51516372',"Loans Guarantee Details")) {}
                trigger OnPreDataItem();
                begin
                    //ReportForNav.OnPreDataItem('Table51516372',"Loans Guarantee Details");
                end;
            }
            trigger OnPreDataItem();
            begin
                GenJournalLine.Reset;
                GenJournalLine.SetRange(GenJournalLine."Journal Template Name", 'GENERAL');
                GenJournalLine.SetRange(GenJournalLine."Journal Batch Name", 'SCHARGE');
                if GenJournalLine.Find('-') then
                    GenJournalLine.DeleteAll;
                BATCH_TEMPLATE := 'GENERAL';
                BATCH_NAME := 'SCHARGE';
                PDate := Today;
                if Customer.GetFilter(Customer."Date Filter") <> '' then
                    DateFilterBF := '..' + Format(CalcDate('-1D', Customer.GetRangeMin(Customer."Date Filter")));
                //ReportForNav.OnPreDataItem('Customer', Customer);
            end;

            trigger OnAfterGetRecord();
            begin
                /*DOCUMENT_NO := "No.";
				IF CONFIRM('Do you want to charge Statement Fee?',FALSE)=FALSE THEN
				  EXIT
				ELSE
				  BEGIN
					//MESSAGE('Charge for Member %1',DOCUMENT_NO);
					Charges.RESET();
					Charges.SETRANGE(Charges.Code,'STATEMENT_CHARGES');
					IF Charges.FIND('-') THEN
					  BEGIN
						StmtCharge := Charges."Charge Amount";
						ChargesGL := Charges."GL Account";
						IF StmtCharge > 0 THEN
						  IF vend.GET("FOSA Account No.") THEN
						  BEGIN
							LineNo:=LineNo+10000;
							SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE,BATCH_NAME,DOCUMENT_NO,LineNo,GenJournalLine."Transaction Type"::" ",
							GenJournalLine."Account Type"::Vendor,Customer."FOSA Account No.",PDate,StmtCharge,'FOSA',DOCUMENT_NO,
							'Detailed Statement Charge','');
						//-------------PAY----------------------------
							LineNo:=LineNo+10000;
							SFactory.FnCreateGnlJournalLine(BATCH_TEMPLATE,BATCH_NAME,DOCUMENT_NO,LineNo,GenJournalLine."Transaction Type"::" ",
							GenJournalLine."Account Type"::"G/L Account",ChargesGL,PDate,StmtCharge*-1,'FOSA',DOCUMENT_NO,
							'Detailed Statement Charge','');
						  END;
					  END;
				  END;*/
                SaccoEmp.Reset;
                SaccoEmp.SetRange(SaccoEmp.Code, Customer."Employer Code");
                if SaccoEmp.Find('-') then
                    EmployerName := SaccoEmp.Description;
                SharesBF := 0;
                InsuranceBF := 0;
                ShareCapBF := 0;
                RiskBF := 0;
                HseBF := 0;
                Dep1BF := 0;
                Dep2BF := 0;
                if DateFilterBF <> '' then begin
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", "No.");
                    Cust.SetFilter(Cust."Date Filter", DateFilterBF);
                    if Cust.Find('-') then begin
                        Cust.CalcFields(Cust."Shares Retained", Cust."Current Shares", Cust."Insurance Fund", Cust."Dividend Amount");
                        SharesBF := (Cust."Current Shares" * -1);
                        ShareCapBF := (Cust."Shares Retained" * -1);
                        RiskBF := Cust."Insurance Fund";
                        DividendBF := Cust."Dividend Amount";
                        //XmasBF:=Cust."Holiday Savings";
                        //HseBF:=Cust."Household Item Deposit";
                        //Dep1BF:=Cust."Dependant 1";
                        //Dep2BF:=Cust."Dependant 2";
                    end;
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }

    trigger OnPreReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);
        ;
        // ReportsForNavPre;

    end;

    var
        OpenBalance: Decimal;
        CLosingBalance: Decimal;
        OpenBalanceXmas: Decimal;
        CLosingBalanceXmas: Decimal;
        Cust: Record Customer;
        OpeningBal: Decimal;
        ClosingBal: Decimal;
        FirstRec: Boolean;
        PrevBal: Integer;
        BalBF: Decimal;
        LoansR: Record "Loans Register";
        DateFilterBF: Text[150];
        SharesBF: Decimal;
        InsuranceBF: Decimal;
        LoanBF: Decimal;
        PrincipleBF: Decimal;
        InterestBF: Decimal;
        ShowZeroBal: Boolean;
        ClosingBalSHCAP: Decimal;
        ShareCapBF: Decimal;
        RiskBF: Decimal;
        DividendBF: Decimal;
        KhojaBF: Decimal;
        Company: Record "Company Information";
        OpenBalanceHse: Decimal;
        CLosingBalanceHse: Decimal;
        OpenBalanceDep1: Decimal;
        CLosingBalanceDep1: Decimal;
        OpenBalanceDep2: Decimal;
        CLosingBalanceDep2: Decimal;
        HseBF: Decimal;
        Dep1BF: Decimal;
        Dep2BF: Decimal;
        OpeningBalInt: Decimal;
        ClosingBalInt: Decimal;
        InterestPaid: Decimal;
        SumInterestPaid: Decimal;
        OpenBalanceRisk: Decimal;
        CLosingBalanceRisk: Decimal;
        OpenBalanceHoliday: Decimal;
        ClosingBalanceHoliday: Decimal;
        LoanSetup: Record "Loan Products Setup";
        LoanName: Text[50];
        SaccoEmp: Record "Sacco Employers";
        EmployerName: Text[100];
        OpenBalanceShareCap: Decimal;
        ClosingBalanceShareCap: Decimal;
        OpenBalanceDeposits: Decimal;
        ClosingBalanceDeposits: Decimal;
        OpenBalanceDividend: Decimal;
        ClosingBalanceDividend: Decimal;
        OpenBalanceKhoja: Decimal;
        StmtCharge: Decimal;
        Charges: Record Charges;
        ChargesGL: Code[20];
        LineNo: Integer;
        SFactory: Codeunit "SWIZZSFT Factory";
        GenJournalLine: Record "Gen. Journal Line";
        BATCH_TEMPLATE: Code[50];
        BATCH_NAME: Code[50];
        DOCUMENT_NO: Code[50];
        PDate: Date;
        vend: Record Vendor;
        ClosingBalanceKhoja: Decimal;

    trigger OnInitReport();
    begin
        ;
        //ReportsForNavInit;
    end;


    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
