Report 51013 "Dividend Register"

{
    UsageCategory = Tasks;
    RDLCLayout = './Layouts/DividendsRegister.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Customer; Customer)
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", Status;
            column(ReportForNavId_6836; 6836) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }

            column(UserId; UserId)
            {
            }
            column(Customer__No__; Customer."No.")
            {
            }
            column(Customer_Name; Customer.Name)
            {
            }
            column(Customer__Current_Shares_; Customer."Current Shares")
            {
            }
            column(CustomerCaption; CustomerCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Customer__No__Caption; FieldCaption("No."))
            {
            }
            column(Customer_NameCaption; FieldCaption(Name))
            {
            }
            column(IntOnDeposits; IntOnDeposits) { }

            column(Customer__Current_Shares_Caption; FieldCaption("Current Shares"))
            {
            }
            column(Shares_Retained; "Shares Retained")
            {
            }
            column(DividendsOnshareCapital; DividendsOnshareCapital)
            { }
            column(WithTaxTotal; WthTAxTotal)
            { }
            column(DivTotal; DivTotal)
            {
            }
            column(Totalpay; Totalpay) { }
            column(Jan; Jan) { }
            column(Feb; Feb) { }
            column(March; March) { }
            column(Apri; Apri) { }
            column(May; May) { }
            column(Jun; Jun) { }
            column(July; July) { }
            column(Aug; Aug) { }
            column(Sept; Sept) { }
            column(Oct; Oct) { }
            column(Nov; Nov) { }
            column(Dec; Dec) { }


            // dataitem("Dividends Progression"; "Dividends Progression")
            // {
            //     DataItemLink = "Member No" = field("No.");
            //     RequestFilterFields = Date;
            // }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FIELDNO("No.");

                Cust.RESET;
                Cust.MODIFYALL(Cust."Net Dividend Payable", 0);

            end;

            trigger OnAfterGetRecord();
            var
                WtaX: Decimal;



            begin
                Customer."Net Dividend Payable" := 0;

                DivProg.RESET;
                DivProg.SETCURRENTKEY("Member No");
                DivProg.SETRANGE(DivProg."Member No", Customer."No.");
                IF DivProg.FIND('-') THEN begin
                    DivProg.DELETEALL;
                end;


                IF "From Date" = 0D THEN begin
                    ERROR('You must specify start Date.');
                end;


                DivTotal := 0;
                "W/Tax" := 0;
                CommDiv := 0;
                WtaX := 0;
                WthTAxTotal := 0;
                TotalPay := 0;
                DividendsOnshareCapital := 0;
                IntOnDeposits := 0;
                QualifyingShares := 0;
                TheRunbal := 0;
                Jan := 0;
                Feb := 0;
                March := 0;
                Apri := 0;
                May := 0;
                Jun := 0;
                July := 0;
                Aug := 0;
                Sept := 0;
                Oct := 0;
                Nov := 0;
                Dec := 0;
                GenSetUp.GET();

                //1st Month
                EVALUATE(BDate, '01/01/05');
                FromDate := BDate;
                ToDate := CALCDATE('-1D', "From Date");
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * (Cust."Current Shares");
                        end else begin
                            CInterest := 0;
                        end;
                        IntOnDeposits := CInterest;
                        DividendsOnshareCapital := CDiv;
                        Jan := (CDiv + CInterest);
                        DivTotal := (CDiv + CInterest);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WtaX;
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;


                    END;
                END;

                //2nd Month(Jan)
                FromDate := "From Date";
                ToDate := CALCDATE('-1D', CALCDATE('1M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN


                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (11 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        Feb := (CDiv + CInterest);
                        DivTotal := DivTotal + (CDiv + CInterest);

                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //3rd Month feb
                FromDate := CALCDATE('1M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('2M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * ((Cust."Shares Retained"));
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (10 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        March := (CDiv + CInterest);
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);

                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;

                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //4th Month
                FromDate := CALCDATE('2M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('3M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (9 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        Apri := (CDiv + CInterest);
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        //"Interest on Share Capital(%)"
                        //DividendsOnshareCapital := +(DividendsOnshareCapital + CDiv);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //5th Month
                FromDate := CALCDATE('3M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('4M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (8 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        May := (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //6th Month
                FromDate := CALCDATE('4M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('5M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (7 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        Jun := (CDiv + CInterest);
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //7th Month
                FromDate := CALCDATE('5M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('6M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (6 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        July := (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //8th Month
                FromDate := CALCDATE('6M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('7M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (5 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        Aug := (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //9th Month
                FromDate := CALCDATE('7M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('8M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (4 / 12));
                        end else begin
                            CInterest := 0;
                        end;

                        Sept := (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //10th Month
                FromDate := CALCDATE('8M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('9M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN

                        WthTAxTotal := WthTAxTotal + WtaX;
                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (3 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        oct := (CDiv + CInterest);
                        DivTotal := DivTotal + (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;

                //11th Month
                FromDate := CALCDATE('9M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('10M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN


                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (2 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        Nov := (CDiv + CInterest);
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;


                //12th Month
                FromDate := CALCDATE('10M', "From Date");
                ToDate := CALCDATE('-1D', CALCDATE('11M', "From Date"));
                EVALUATE(FromDateS, FORMAT(FromDate));
                EVALUATE(ToDateS, FORMAT(ToDate));

                DateFilter := FromDateS + '..' + ToDateS;
                Cust.RESET;
                Cust.SETCURRENTKEY("No.");
                Cust.SETRANGE(Cust."No.", Customer."No.");
                Cust.SETFILTER(Cust."Date Filter", DateFilter);
                IF Cust.FIND('-') THEN BEGIN
                    Cust.CALCFIELDS(Cust."Current Shares", Cust."Shares Retained");
                    IF (Cust."Current Shares" <> 0.01) THEN BEGIN
                        if Cust."Current Shares" > 0 then begin
                            CInterest := (GenSetUp."Interest On Current Shares" / 100) * ((Cust."Current Shares") * (2 / 12));
                        end else begin
                            CInterest := 0;
                        end;
                        CDiv := (GenSetUp."Interest on Share Capital(%)" / 100) * (Cust."Shares Retained");

                        Dec := (CDiv + CInterest);
                        IntOnDeposits := IntOnDeposits + CInterest;
                        DividendsOnshareCapital := DividendsOnshareCapital + CDiv;
                        DivTotal := DivTotal + (CDiv + CInterest);
                        WtaX := (CDiv + CInterest) * (GenSetUp."Withholding Tax (%)" / 100);
                        WthTAxTotal := WthTAxTotal + WtaX;
                        // DivProg.INIT;
                        // DivProg."Member No" := Customer."No.";
                        // DivProg.Date := ToDate;
                        // DivProg."Gross Dividends" := DivTotal;
                        // DivProg."Gross Interest On Deposit" := CInterest;
                        // DivProg."Qualifying Share Capital" := Cust."Shares Retained";
                        // DivProg."Witholding Tax" := WthTAxTotal;
                        // DivProg."Net Dividends" := DivTotal - WthTAxTotal;
                        // DivProg."Qualifying Shares" := Cust."Current Shares";
                        // DivProg.Shares := Cust."Current Shares";
                        // DivProg."Share Capital" := Cust."Shares Retained";
                        // DivProg.INSERT;

                    END;
                END;



                Customer."Net Dividend Payable" := DivTotal;
                Customer.MODIFY;

                // DivProg.RESET;
                // DivProg.SETRANGE(DivProg."Member No", "No.");
                // IF DivProg.FIND('-') THEN BEGIN
                //     REPEAT
                //         "W/Tax" += DivProg."Witholding Tax";
                //         CommDiv += DivProg.Shares;
                //     UNTIL DivProg.NEXT = 0;
                // END;

                DivTotal := Round((DivTotal), 1, '<');

                TotalPay := DivTotal - WthTAxTotal;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("From Date"; "From Date")
                {
                    ApplicationArea = Basic;
                }
                // field(PostingDate; PostingDate)
                // {
                //     ApplicationArea = Basic;
                // }

            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin

        end;
    }

    trigger OnInitReport()
    begin


    end;

    trigger OnPostReport()
    begin

    end;

    trigger OnPreReport()
    begin

    end;

    var
        QualifyingShares: Decimal;
        WthTAxTotal: Decimal;
        CustomerCaptionLbl: label 'Customer';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        Cust: Record Customer;
        "From Date": Date;
        DateFilter: Text[100];
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text[100];
        ToDateS: Text[100];
        DivTotal: Decimal;
        GenSetUp: Record "Sacco General Set-Up";
        CDeposits: Decimal;
        CustDiv: Record Customer;
        DivProg: Record "Dividends Progression";
        CDiv: Decimal;
        CInterest: Decimal;
        BDate: Date;
        CustR: Record Customer;
        IntOnDeposits: Decimal;
        CIntReb: Decimal;
        LineNo: Integer;
        Gnjlline: Record "Gen. Journal Line";
        PostingDate: Date;
        "W/Tax": Decimal;
        CommDiv: Decimal;
        GenJournalLine: Record "Gen. Journal Line";
        SFactory: Codeunit "SWIZZSFT Factory";
        BATCH_NAME: Code[50];
        BATCH_TEMPLATE: Code[50];
        DOCUMENT_NO: Code[50];
        ObjGensetup: Record "Sacco General Set-Up";
        Totalpay: Decimal;
        WithTaxTotal: Decimal;
        DividendsOnshareCapital: Decimal;
        LoanType: Record "Loan Products Setup";
        TheRunbal: Decimal;
        Calculations: Decimal;
        Remainder: Decimal;
        IntToRecover: Decimal;
        LoanToRecover: Decimal;
        Jan: Decimal;
        Feb: Decimal;
        March: Decimal;
        Apri: Decimal;
        May: Decimal;
        Jun: Decimal;
        July: Decimal;
        Aug: Decimal;
        Sept: Decimal;
        Oct: Decimal;
        Nov: Decimal;
        Dec: Decimal;








}

