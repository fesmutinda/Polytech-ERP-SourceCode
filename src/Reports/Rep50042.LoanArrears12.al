#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 50042 "Loan Arrears12"//older
{
    RDLCLayout = './Layout/LoanArrears12.rdl';
    DefaultLayout = RDLC;
    Caption = 'Loan Arears1';

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "No.", "Loan Product Filter", "Outstanding Balance", "Date Filter";
            column(ReportForNavId_1102755000; 1102755000) { } // Autogenerated by ForNav - Do not delete
            //column(ReportForNav_Table51516364; ReportForNavWriteDataItem('Table51516364', UnknownTable51516364)) { }
            column(No_Members; Customer."No.")
            {
            }
            column(Name_Members; Customer.Name)
            {
            }
            column(Company_Picture; Company.Picture)

            {
            }
            dataitem(Loans; "Loans Register")
            {
                DataItemLink = "Client Code" = field("No."), "Date filter" = field("Date Filter"), "Loan Product Type" = field("Loan Product Filter"), "Loan  No." = field("Loan No. Filter");
                DataItemTableView = sorting("Loan  No.") where(Posted = const(true));//, "Loan Product Type" = filter(<> '24'));//exclude mpolytech
                //column(ReportForNavId_1102755024; 1102755024) { } // Autogenerated by ForNav - Do not delete
                // column(ReportForNav_Loans; ReportForNavWriteDataItem('Loans', Loans)) { }
                column(LoanNo_Loans; Loans."Loan  No.")
                {
                }
                column(ProductType; LoanName)
                {
                }
                column(Installments; Loans.Installments)
                {
                }
                column(ApprovedAmount_Loans; Loans."Approved Amount")
                {
                }
                column(OutstandingBalance_Loans; Loans."Outstanding Balance")
                {
                }
                column(OustandingInterest_Loans; Loans."Oustanding Interest")
                {
                }
                column(LoansCategorySASRA_Loans; Loans."Loans Category-SASRA")
                {
                }
                column(ScheduleBalance; ScheduleBalance)
                {
                }
                column(IssuedDate_Loans; Loans."Issued Date")
                {
                }
                column(DueDate; DueDate)
                {
                }
                column(AmountinArrears_Loans; Loans."Amount in Arrears")
                {
                }
                trigger OnPreDataItem();
                begin
                    Loans.SetFilter(Loans."Date filter", Customer.GetFilter(Customer."Date Filter"));
                    LoanArrears := 0;
                    ScheduleBalance := 0;
                    DueDate := 0D;
                    // ReportForNav.OnPreDataItem('Loans', Loans);
                end;

                trigger OnAfterGetRecord();
                begin
                    ScheduleBalance := 0; // Inserted by ForNAV
                    if LoanSetup.Get(Loans."Loan Product Type") then
                        LoanName := LoanSetup."Product Description";
                    if DateFilterBF <> '' then begin
                        LoansR.Reset;
                        LoansR.SetRange(LoansR."Loan  No.", "Loan  No.");
                        LoansR.SetFilter(LoansR."Date filter", DateFilterBF);
                        //LoansR.SETRANGE(LoansR."Loan Product Type","Loan Product Type");
                        if LoansR.Find('-') then begin
                            LoansR.CalcFields(LoansR."Outstanding Balance", LoansR."Oustanding Interest");
                            PrincipleBF := LoansR."Outstanding Balance";
                            InterestBF := LoansR."Oustanding Interest";
                        end;
                    end;
                    Loans.CalcFields("Outstanding Balance", "Oustanding Interest");
                    DueDate := CalcDate(Format(Loans.Installments) + 'M', Loans."Issued Date");
                    if (Loans."Outstanding Balance" + Loans."Oustanding Interest") <= 0 then
                        CurrReport.Skip;
                    LoanRepaymentSchedule.Reset;
                    LoanRepaymentSchedule.SetRange("Loan No.", Loans."Loan  No.");
                    LoanRepaymentSchedule.SetFilter("Repayment Date", '<=%1', Today);
                    if LoanRepaymentSchedule.FindLast() then begin
                        ScheduleBalance := LoanRepaymentSchedule."Loan Balance";
                        LoanArrears := Loans."Outstanding Balance" + Loans."Oustanding Interest" + ScheduleBalance;
                        if LoanArrears < 0 then
                            LoanArrears := 0;
                        TotalArrears := TotalArrears + LoanArrears;
                    end;
                end;

            }
            trigger OnPreDataItem();
            begin
                if Customer.GetFilter(Customer."Date Filter") <> '' then
                    DateFilterBF := '..' + Format(CalcDate('-1D', Customer.GetRangeMin(Customer."Date Filter")));
                TotalArrears := 0;
                //ReportForNav.OnPreDataItem(Customer, Customer);
            end;

            trigger OnAfterGetRecord();
            begin
                SaccoEmp.Reset;
                SaccoEmp.SetRange(SaccoEmp.Code, Customer."Employer Code");
                if SaccoEmp.Find('-') then
                    EmployerName := SaccoEmp.Description;
                SharesBF := 0;
                InsuranceBF := 0;
                ShareCapBF := 0;
                RiskBF := 0;
                HseBF := 0;
                Dep1BF := 0;
                Dep2BF := 0;
                if DateFilterBF <> '' then begin
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", "No.");
                    Cust.SetFilter(Cust."Date Filter", DateFilterBF);
                    if Cust.Find('-') then begin
                        Cust.CalcFields(Cust."Shares Retained", Cust."Current Shares", Cust."Insurance Fund");
                        SharesBF := Cust."Current Shares";
                        ShareCapBF := Cust."Shares Retained";
                        RiskBF := Cust."Insurance Fund";
                        //XmasBF:=Cust."Holiday Savings";
                        //HseBF:=Cust."Household Item Deposit";
                        //Dep1BF:=Cust."Dependant 1";
                        //Dep2BF:=Cust."Dependant 2";
                    end;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }

    trigger OnPreReport()
    begin
        Company.Get();
        Company.CalcFields(Company.Picture);


    end;

    var
        OpenBalance: Decimal;
        CLosingBalance: Decimal;
        OpenBalanceXmas: Decimal;
        CLosingBalanceXmas: Decimal;
        Cust: Record Customer;
        OpeningBal: Decimal;
        ClosingBal: Decimal;
        FirstRec: Boolean;
        PrevBal: Integer;
        BalBF: Decimal;
        LoansR: Record "Loans Register";
        DateFilterBF: Text[150];
        SharesBF: Decimal;
        InsuranceBF: Decimal;
        LoanBF: Decimal;
        PrincipleBF: Decimal;
        InterestBF: Decimal;
        ShowZeroBal: Boolean;
        ClosingBalSHCAP: Decimal;
        ShareCapBF: Decimal;
        RiskBF: Decimal;
        DividendBF: Decimal;
        Company: Record "Company Information";
        OpenBalanceHse: Decimal;
        CLosingBalanceHse: Decimal;
        OpenBalanceDep1: Decimal;
        CLosingBalanceDep1: Decimal;
        OpenBalanceDep2: Decimal;
        CLosingBalanceDep2: Decimal;
        HseBF: Decimal;
        Dep1BF: Decimal;
        Dep2BF: Decimal;
        OpeningBalInt: Decimal;
        ClosingBalInt: Decimal;
        InterestPaid: Decimal;
        SumInterestPaid: Decimal;
        OpenBalanceRisk: Decimal;
        CLosingBalanceRisk: Decimal;
        OpenBalanceDividend: Decimal;
        ClosingBalanceDividend: Decimal;
        OpenBalanceHoliday: Decimal;
        ClosingBalanceHoliday: Decimal;
        LoanSetup: Record "Loan Products Setup";
        LoanName: Text[50];
        SaccoEmp: Record "Sacco Employers";
        EmployerName: Text[100];
        LoanArrears: Decimal;
        LoanRepaymentSchedule: Record "Loan Repayment Schedule";
        TotalArrears: Decimal;
        ScheduleBalance: Decimal;
        DueDate: Date;

    trigger OnInitReport();
    begin
        ;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

}
